Import('env')

import os

base_env = env.Clone()
base_env.Replace(NANOPBFLAGS = '--cpp-descriptor')
# NOTE: base_env.Replace(NANOPBFLAGS = '--source-extension=.cc,--cpp-descriptor')
# does not work. Looks like tests/site_scons/site_tools/nanopb.py:_nanopb_proto_builder forces '.c' suffix
base_env.NanopbProto('message')

# Workaround...
# Copy the files to .cxx extension in order to force C++ build.
c = Copy("$TARGET", "$SOURCE")
env.Command("message.pb.cc", "$BUILD/cxx_callback_datatype/message.pb.c", c)

for std in ["c++03", "c++11", "c++14", "c++17", "c++20"]:
    e = base_env.Clone()
    e.Append(CXXFLAGS = '-std={}'.format(std))

    # Make sure compiler supports this version of C++ before we actually run the
    # test.
    conf = Configure(e)
    compiler_valid = conf.CheckCXX()
    e = conf.Finish()
    if not compiler_valid:
        print("Skipping {} test - compiler doesn't support it".format(std))
        continue

    sources = [ 'cxx_callback_datatype.cc', 'message.pb.cc', '$NANOPB/pb_decode.c', '$NANOPB/pb_encode.c', '$NANOPB/pb_common.c' ]
    objects = [ e.Object('{}_{}'.format(os.path.basename(s), std), s) for s in sources ]
    p = e.Program(target = 'cxx_callback_datatype_{}'.format(std), source = objects)
    e.RunTest(p)
