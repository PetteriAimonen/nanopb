/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8-dev at Fri Feb 10 11:25:26 2017. */

#ifndef PB_API_PB_H_INCLUDED
#define PB_API_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _UartConfig_DataSize {
    UartConfig_DataSize_DS_7B = 1,
    UartConfig_DataSize_DS_8B = 2,
    UartConfig_DataSize_DS_9B = 3
} UartConfig_DataSize;
#define _UartConfig_DataSize_MIN UartConfig_DataSize_DS_7B
#define _UartConfig_DataSize_MAX UartConfig_DataSize_DS_9B
#define _UartConfig_DataSize_ARRAYSIZE ((UartConfig_DataSize)(UartConfig_DataSize_DS_9B+1))

typedef enum _UartConfig_Parity {
    UartConfig_Parity_NONE = 0,
    UartConfig_Parity_ODD = 1,
    UartConfig_Parity_EVEN = 2
} UartConfig_Parity;
#define _UartConfig_Parity_MIN UartConfig_Parity_NONE
#define _UartConfig_Parity_MAX UartConfig_Parity_EVEN
#define _UartConfig_Parity_ARRAYSIZE ((UartConfig_Parity)(UartConfig_Parity_EVEN+1))

typedef enum _UartConfig_StopBits {
    UartConfig_StopBits_ONE = 1,
    UartConfig_StopBits_TWO = 2
} UartConfig_StopBits;
#define _UartConfig_StopBits_MIN UartConfig_StopBits_ONE
#define _UartConfig_StopBits_MAX UartConfig_StopBits_TWO
#define _UartConfig_StopBits_ARRAYSIZE ((UartConfig_StopBits)(UartConfig_StopBits_TWO+1))

/* Struct definitions */
typedef struct _HelloRequest {
    char *test_string;
    int32_t dummy_number;
/* @@protoc_insertion_point(struct:HelloRequest) */
} HelloRequest;

typedef struct _HelloResponse {
    pb_callback_t test_string;
    int32_t dummy_number;
/* @@protoc_insertion_point(struct:HelloResponse) */
} HelloResponse;

typedef struct _UartConfig {
    int32_t speed;
    UartConfig_DataSize data_size;
    UartConfig_Parity parity;
    UartConfig_StopBits stop_bits;
/* @@protoc_insertion_point(struct:UartConfig) */
} UartConfig;

typedef struct _SendRequest {
    bool has_uart_config;
    UartConfig uart_config;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:SendRequest) */
} SendRequest;

/* Default values for struct fields */

/* Initializer values for message structs */
#define HelloRequest_init_default                {NULL, 0}
#define HelloResponse_init_default               {{{NULL}, NULL}, 0}
#define UartConfig_init_default                  {0, (UartConfig_DataSize)0, (UartConfig_Parity)0, (UartConfig_StopBits)0}
#define SendRequest_init_default                 {false, UartConfig_init_default, {{NULL}, NULL}}
#define HelloRequest_init_zero                   {NULL, 0}
#define HelloResponse_init_zero                  {{{NULL}, NULL}, 0}
#define UartConfig_init_zero                     {0, (UartConfig_DataSize)0, (UartConfig_Parity)0, (UartConfig_StopBits)0}
#define SendRequest_init_zero                    {false, UartConfig_init_zero, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define HelloRequest_test_string_tag             1
#define HelloRequest_dummy_number_tag            2
#define HelloResponse_test_string_tag            1
#define HelloResponse_dummy_number_tag           2
#define UartConfig_speed_tag                     1
#define UartConfig_data_size_tag                 2
#define UartConfig_parity_tag                    3
#define UartConfig_stop_bits_tag                 4
#define SendRequest_uart_config_tag              1
#define SendRequest_data_tag                     2

/* Struct field encoding specification for nanopb */
extern const pb_field_t HelloRequest_fields[3];
extern const pb_field_t HelloResponse_fields[3];
extern const pb_field_t UartConfig_fields[5];
extern const pb_field_t SendRequest_fields[3];

/* Maximum encoded size of messages (where known) */
/* HelloRequest_size depends on runtime parameters */
/* HelloResponse_size depends on runtime parameters */
#define UartConfig_size                          17
/* SendRequest_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define API_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
